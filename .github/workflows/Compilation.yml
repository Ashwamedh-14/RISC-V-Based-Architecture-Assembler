name: C++ CI

on:
  push:
    branches: [main]
    paths:
      - 'New Code/main.cpp'  # Trigger only when `main.cpp` changes

jobs:
  # Build job for Linux
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read Version Number
        run: echo "CURRENT_VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Create bin Directory
        run: mkdir -p bin/

      - name: Compile with g++
        run: g++ -static-libstdc++ ./'New Code'/main.cpp -o bin/Assembler

      - name: Ensure Executable Works
        run: chmod +x bin/Assembler

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Assembler-linux
          path: bin/Assembler

  # Build job for Windows
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read Version Number
        run: echo "CURRENT_VERSION=$(Get-Content version.txt)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Use cache MinGW
        id: cache-mingw
        uses: actions/cache@v3
        with:
          path: "C:\\mingw64"
          key: ${{ runner.os }}-mingw-cache-v1
          restore-keys: |
            ${{ runner.os }}-mingw-cache-
              
      - name: Install MinGW (If Not Cached)
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: choco install mingw -y

      - name: Checking where MinGW is installed
        run: |
          echo "🔍 Checking where gcc is installed..."
          where gcc
          Get-Command gcc
          echo "🔍 Checking where g++ is installed..."
          where g++
          Get-Command g++
          echo "🔍 Verifying g++ version..."
          g++ --version
      
      - name: Add MinGW to PATH
        run: |
          echo "Adding MinGW to PATH"
          echo "C:\\mingw64\\bin" >> $env:GITHUB_PATH

      - name: Create bin Directory (if not exists)
        run: |
          if (-Not (Test-Path bin)) {
            mkdir bin
          }

      - name: Compile with g++
        run: g++ -static-libstdc++ ./'New Code'/main.cpp -o bin/Assembler_x64.exe

      - name: Ensure Executable Works
        run: |
          if (!(Test-Path bin/Assembler_x64.exe)) { exit 1 }

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Assembler-windows
          path: bin/Assembler_x64.exe

  # Build job for macOS
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read Version Number
        run: echo "CURRENT_VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Create bin Directory
        run: mkdir -p bin/

      - name: Compile with clang++
        run: clang++ -std=c++17 ./'New Code'/main.cpp -o bin/Assembler_MacOS

      - name: Ensure Executable Works
        run: chmod +x bin/Assembler_MacOS

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Assembler-macos
          path: bin/Assembler_MacOS

  # Commit the executables & version update
  commit-executables:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Linux Executable
        uses: actions/download-artifact@v4
        with:
          name: Assembler-linux
          path: bin/

      - name: Download Windows Executable
        uses: actions/download-artifact@v4
        with:
          name: Assembler-windows
          path: bin/

      - name: Download macOS Executable
        uses: actions/download-artifact@v4
        with:
          name: Assembler-macos
          path: bin/

      - name: Get Version Number
        run: |
          VERSION=$(cat version.txt)

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Create New Branch
        run: git checkout -b add-executables-${{ github.sha }}

      - name: Commit Executables & Version Update
        run: |
          git add bin/
          git commit -m "Added executables for version $VERSION_NUMBER"
          git push https://github.com/${{ github.repository }}.git HEAD:add-executables-${{ github.sha }}

      - name: Create & Auto-Merge Pull Request
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          gh auth login --with-token <<< "$GH_PAT"
          PR_URL=$(gh pr create --title "Added executables for version $VERSION_NUMBER" \
                                --body "This PR adds the executables and updates version.txt to $NEW_VERSION" \
                                --head add-executables-${{ github.sha }} \
                                --base main)
          echo "Pull request created: $PR_URL"
          
          # Extract PR number from URL
          PR_NUMBER=$(basename "$PR_URL")

          # Auto-merge the PR
          gh pr merge "$PR_NUMBER" --merge --admin
