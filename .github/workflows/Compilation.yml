name: C++ CI

on:
  push:
    tags:
      - 'v*'

jobs:
  # Build job for Linux
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read Version Number
        run: echo "CURRENT_VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Create bin Directory
        run: mkdir -p bin/

      - name: Install dependencies
        run: sudo apt install build-essential make

      - name: Compile with make
        run: make

      - name: Ensure Executable Works
        run: chmod +x bin/Assembler

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Assembler-linux
          path: bin/Assembler

  # Build job for Windows
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Use cache MinGW
        id: cache-mingw
        uses: actions/cache@v3
        with:
          path: "C:\\ProgramData\\mingw64\\mingw64"
          key: ${{ runner.os }}-mingw-cache-v2
          restore-keys: |
            ${{ runner.os }}-mingw-cache-

      - name: Install MinGW (If Not Cached) and make
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: choco install mingw make -y

      - name: Add MinGW to PATH
        run: |
          echo "Adding MinGW to PATH"
          echo "C:\\ProgramData\\mingw64\\mingw64\\bin" >> $env:GITHUB_PATH

      - name: Create bin Directory (if not exists)
        run: |
          if (-Not (Test-Path bin)) {
            mkdir bin
          }

      - name: Compile with make
        run: make windows

      - name: Ensure Executable Works
        run: |
          if (!(Test-Path bin/Assembler_x64.exe)) { exit 1 }

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Assembler-windows
          path: bin/Assembler_x64.exe

  # Create Release with Executables
  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to fetch full tag history for tag messages

      - name: Download Linux Executable
        uses: actions/download-artifact@v4
        with:
          name: Assembler-linux
          path: artifacts/

      - name: Download Windows Executable
        uses: actions/download-artifact@v4
        with:
          name: Assembler-windows
          path: artifacts/

      - name: Zip Artifacts
        run: |
          cd artifacts
          zip Assembler-linux.zip Assembler
          zip Assembler-windows.zip Assembler_x64.exe

      - name: Get tag message
        id: tag_message
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          MESSAGE=$(git for-each-ref refs/tags/$TAG_NAME --format='%(contents)')
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.tag_message.outputs.message }}
          files: |
            artifacts/Assembler
            artifacts/Assembler_x64.exe
            artifacts/Assembler-linux.zip
            artifacts/Assembler-windows.zip

